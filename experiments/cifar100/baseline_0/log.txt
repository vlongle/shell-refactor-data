dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
creating subset for cifar100_train_cls=0.pt
creating subset for cifar100_train_cls=77.pt
creating subset for cifar100_train_cls=80.pt
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets length: [256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256] with provided size 256
subsets length: [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128] with provided size 128
subsets lengthwith provided size 1.0
Task 1/20
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
subsets lengthwith provided size 128
subsets length: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100] with provided size 1.0
Task 1/20
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
subsets lengthwith provided size 128
subsets length: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100] with provided size 1.0
Task 1/20
dataset dim: torch.Size([3, 32, 32])
subsets length: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
subsets lengthwith provided size 128
subsets length: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100] with provided size 1.0
Task 1/20
epoch: 1, step 0 loss: 0.000 | val_loss 4.602 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.000
epoch: 2, step 40 loss: 49.131 | val_loss 1.670 | train_acc 0.231 | val_acc 0.230 | test_acc 0.234 | past_task_test_acc 0.234
epoch: 3, step 80 loss: 47.141 | val_loss 1.535 | train_acc 0.283 | val_acc 0.292 | test_acc 0.286 | past_task_test_acc 0.286
epoch: 4, step 120 loss: 45.516 | val_loss 1.466 | train_acc 0.329 | val_acc 0.302 | test_acc 0.338 | past_task_test_acc 0.338
epoch: 5, step 160 loss: 50.191 | val_loss 1.461 | train_acc 0.327 | val_acc 0.312 | test_acc 0.328 | past_task_test_acc 0.328
epoch: 6, step 200 loss: 50.646 | val_loss 1.418 | train_acc 0.336 | val_acc 0.317 | test_acc 0.358 | past_task_test_acc 0.358
epoch: 7, step 240 loss: 47.042 | val_loss 1.519 | train_acc 0.366 | val_acc 0.353 | test_acc 0.366 | past_task_test_acc 0.366
epoch: 8, step 280 loss: 48.775 | val_loss 1.470 | train_acc 0.354 | val_acc 0.338 | test_acc 0.356 | past_task_test_acc 0.356
epoch: 9, step 320 loss: 41.979 | val_loss 1.748 | train_acc 0.329 | val_acc 0.308 | test_acc 0.318 | past_task_test_acc 0.318
epoch: 10, step 360 loss: 40.707 | val_loss 1.199 | train_acc 0.488 | val_acc 0.458 | test_acc 0.468 | past_task_test_acc 0.468
epoch: 11, step 400 loss: 35.253 | val_loss 1.312 | train_acc 0.423 | val_acc 0.389 | test_acc 0.414 | past_task_test_acc 0.414
epoch: 12, step 440 loss: 36.344 | val_loss 1.220 | train_acc 0.470 | val_acc 0.470 | test_acc 0.468 | past_task_test_acc 0.468
epoch: 13, step 480 loss: 34.225 | val_loss 1.215 | train_acc 0.504 | val_acc 0.503 | test_acc 0.462 | past_task_test_acc 0.462
epoch: 14, step 520 loss: 29.833 | val_loss 1.110 | train_acc 0.554 | val_acc 0.503 | test_acc 0.566 | past_task_test_acc 0.566
epoch: 15, step 560 loss: 29.540 | val_loss 1.258 | train_acc 0.541 | val_acc 0.516 | test_acc 0.514 | past_task_test_acc 0.514
epoch: 16, step 600 loss: 40.699 | val_loss 1.156 | train_acc 0.579 | val_acc 0.562 | test_acc 0.536 | past_task_test_acc 0.536
epoch: 17, step 640 loss: 30.578 | val_loss 1.095 | train_acc 0.627 | val_acc 0.561 | test_acc 0.584 | past_task_test_acc 0.584
epoch: 18, step 680 loss: 31.939 | val_loss 1.076 | train_acc 0.662 | val_acc 0.592 | test_acc 0.608 | past_task_test_acc 0.608
epoch: 19, step 720 loss: 34.006 | val_loss 1.030 | train_acc 0.666 | val_acc 0.623 | test_acc 0.622 | past_task_test_acc 0.622
epoch: 20, step 760 loss: 20.750 | val_loss 0.898 | train_acc 0.733 | val_acc 0.656 | test_acc 0.650 | past_task_test_acc 0.650
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
subsets lengthwith provided size 128
subsets lengthwith provided size 1.0
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
subsets length: [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128] with provided size 128
subsets lengthwith provided size 1.0
Task 1/20
epoch: 1, step 0 loss: 0.000 | val_loss 4.602 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.000
epoch: 2, step 40 loss: 49.131 | val_loss 1.670 | train_acc 0.231 | val_acc 0.230 | test_acc 0.234 | past_task_test_acc 0.234
epoch: 3, step 80 loss: 47.141 | val_loss 1.535 | train_acc 0.283 | val_acc 0.292 | test_acc 0.286 | past_task_test_acc 0.286
epoch: 4, step 120 loss: 45.516 | val_loss 1.466 | train_acc 0.329 | val_acc 0.302 | test_acc 0.338 | past_task_test_acc 0.338
epoch: 5, step 160 loss: 50.191 | val_loss 1.461 | train_acc 0.327 | val_acc 0.312 | test_acc 0.328 | past_task_test_acc 0.328
epoch: 6, step 200 loss: 50.646 | val_loss 1.418 | train_acc 0.336 | val_acc 0.317 | test_acc 0.358 | past_task_test_acc 0.358
epoch: 7, step 240 loss: 47.042 | val_loss 1.519 | train_acc 0.366 | val_acc 0.353 | test_acc 0.366 | past_task_test_acc 0.366
epoch: 8, step 280 loss: 48.775 | val_loss 1.470 | train_acc 0.354 | val_acc 0.338 | test_acc 0.356 | past_task_test_acc 0.356
epoch: 9, step 320 loss: 41.979 | val_loss 1.748 | train_acc 0.329 | val_acc 0.308 | test_acc 0.318 | past_task_test_acc 0.318
epoch: 10, step 360 loss: 40.707 | val_loss 1.199 | train_acc 0.488 | val_acc 0.458 | test_acc 0.468 | past_task_test_acc 0.468
epoch: 11, step 400 loss: 35.253 | val_loss 1.312 | train_acc 0.423 | val_acc 0.389 | test_acc 0.414 | past_task_test_acc 0.414
epoch: 12, step 440 loss: 36.344 | val_loss 1.220 | train_acc 0.470 | val_acc 0.470 | test_acc 0.468 | past_task_test_acc 0.468
epoch: 13, step 480 loss: 34.225 | val_loss 1.215 | train_acc 0.504 | val_acc 0.503 | test_acc 0.462 | past_task_test_acc 0.462
epoch: 14, step 520 loss: 29.833 | val_loss 1.110 | train_acc 0.554 | val_acc 0.503 | test_acc 0.566 | past_task_test_acc 0.566
epoch: 15, step 560 loss: 29.540 | val_loss 1.258 | train_acc 0.541 | val_acc 0.516 | test_acc 0.514 | past_task_test_acc 0.514
epoch: 16, step 600 loss: 40.699 | val_loss 1.156 | train_acc 0.579 | val_acc 0.562 | test_acc 0.536 | past_task_test_acc 0.536
epoch: 17, step 640 loss: 30.578 | val_loss 1.095 | train_acc 0.627 | val_acc 0.561 | test_acc 0.584 | past_task_test_acc 0.584
epoch: 18, step 680 loss: 31.939 | val_loss 1.076 | train_acc 0.662 | val_acc 0.592 | test_acc 0.608 | past_task_test_acc 0.608
epoch: 19, step 720 loss: 34.006 | val_loss 1.030 | train_acc 0.666 | val_acc 0.623 | test_acc 0.622 | past_task_test_acc 0.622
epoch: 20, step 760 loss: 20.750 | val_loss 0.898 | train_acc 0.733 | val_acc 0.656 | test_acc 0.650 | past_task_test_acc 0.650
Task 2/20
epoch: 1, step 0 loss: 0.000 | val_loss 18.088 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.349
epoch: 2, step 74 loss: 32.254 | val_loss 2.182 | train_acc 0.252 | val_acc 0.261 | test_acc 0.258 | past_task_test_acc 0.149
epoch: 3, step 148 loss: 31.300 | val_loss 2.161 | train_acc 0.296 | val_acc 0.305 | test_acc 0.278 | past_task_test_acc 0.162
epoch: 4, step 222 loss: 30.161 | val_loss 2.249 | train_acc 0.232 | val_acc 0.231 | test_acc 0.220 | past_task_test_acc 0.161
epoch: 5, step 296 loss: 27.066 | val_loss 2.078 | train_acc 0.307 | val_acc 0.316 | test_acc 0.286 | past_task_test_acc 0.196
epoch: 6, step 370 loss: 27.280 | val_loss 1.987 | train_acc 0.255 | val_acc 0.259 | test_acc 0.218 | past_task_test_acc 0.198
epoch: 7, step 444 loss: 30.549 | val_loss 1.852 | train_acc 0.407 | val_acc 0.400 | test_acc 0.416 | past_task_test_acc 0.208
epoch: 8, step 518 loss: 28.429 | val_loss 2.091 | train_acc 0.280 | val_acc 0.275 | test_acc 0.238 | past_task_test_acc 0.172
epoch: 9, step 592 loss: 38.480 | val_loss 2.104 | train_acc 0.191 | val_acc 0.197 | test_acc 0.172 | past_task_test_acc 0.183
epoch: 10, step 666 loss: 28.295 | val_loss 2.020 | train_acc 0.266 | val_acc 0.248 | test_acc 0.232 | past_task_test_acc 0.213
epoch: 11, step 740 loss: 26.054 | val_loss 2.085 | train_acc 0.124 | val_acc 0.105 | test_acc 0.108 | past_task_test_acc 0.221
epoch: 12, step 814 loss: 30.871 | val_loss 1.981 | train_acc 0.202 | val_acc 0.200 | test_acc 0.210 | past_task_test_acc 0.233
epoch: 13, step 888 loss: 21.120 | val_loss 1.868 | train_acc 0.252 | val_acc 0.259 | test_acc 0.240 | past_task_test_acc 0.253
epoch: 14, step 962 loss: 27.562 | val_loss 1.753 | train_acc 0.391 | val_acc 0.384 | test_acc 0.356 | past_task_test_acc 0.248
epoch: 15, step 1036 loss: 21.197 | val_loss 1.709 | train_acc 0.359 | val_acc 0.330 | test_acc 0.308 | past_task_test_acc 0.293
epoch: 16, step 1110 loss: 25.436 | val_loss 1.748 | train_acc 0.398 | val_acc 0.402 | test_acc 0.400 | past_task_test_acc 0.266
epoch: 17, step 1184 loss: 25.067 | val_loss 1.654 | train_acc 0.445 | val_acc 0.438 | test_acc 0.430 | past_task_test_acc 0.302
epoch: 18, step 1258 loss: 23.597 | val_loss 1.814 | train_acc 0.515 | val_acc 0.509 | test_acc 0.460 | past_task_test_acc 0.326
epoch: 19, step 1332 loss: 18.251 | val_loss 1.798 | train_acc 0.485 | val_acc 0.458 | test_acc 0.446 | past_task_test_acc 0.307
epoch: 20, step 1406 loss: 26.348 | val_loss 1.658 | train_acc 0.477 | val_acc 0.445 | test_acc 0.444 | past_task_test_acc 0.346
No. of duplicates: 0
Task 3/20
epoch: 1, step 0 loss: 0.000 | val_loss 13.110 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.260
epoch: 2, step 76 loss: 79.156 | val_loss 2.778 | train_acc 0.052 | val_acc 0.056 | test_acc 0.042 | past_task_test_acc 0.203
epoch: 3, step 152 loss: 56.834 | val_loss 2.491 | train_acc 0.129 | val_acc 0.122 | test_acc 0.130 | past_task_test_acc 0.219
epoch: 4, step 228 loss: 61.452 | val_loss 2.254 | train_acc 0.236 | val_acc 0.255 | test_acc 0.252 | past_task_test_acc 0.241
epoch: 5, step 304 loss: 53.894 | val_loss 2.214 | train_acc 0.245 | val_acc 0.242 | test_acc 0.260 | past_task_test_acc 0.312
epoch: 6, step 380 loss: 64.340 | val_loss 2.314 | train_acc 0.246 | val_acc 0.252 | test_acc 0.230 | past_task_test_acc 0.282
epoch: 7, step 456 loss: 66.032 | val_loss 2.089 | train_acc 0.305 | val_acc 0.308 | test_acc 0.308 | past_task_test_acc 0.321
epoch: 8, step 532 loss: 55.951 | val_loss 1.974 | train_acc 0.299 | val_acc 0.283 | test_acc 0.294 | past_task_test_acc 0.343
epoch: 9, step 608 loss: 44.333 | val_loss 1.896 | train_acc 0.264 | val_acc 0.234 | test_acc 0.236 | past_task_test_acc 0.357
epoch: 10, step 684 loss: 50.450 | val_loss 1.870 | train_acc 0.263 | val_acc 0.275 | test_acc 0.272 | past_task_test_acc 0.353
epoch: 11, step 760 loss: 50.243 | val_loss 2.253 | train_acc 0.333 | val_acc 0.295 | test_acc 0.290 | past_task_test_acc 0.339
epoch: 12, step 836 loss: 39.811 | val_loss 2.252 | train_acc 0.302 | val_acc 0.294 | test_acc 0.286 | past_task_test_acc 0.349
epoch: 13, step 912 loss: 70.521 | val_loss 1.705 | train_acc 0.512 | val_acc 0.441 | test_acc 0.444 | past_task_test_acc 0.382
epoch: 14, step 988 loss: 40.217 | val_loss 1.787 | train_acc 0.430 | val_acc 0.375 | test_acc 0.360 | past_task_test_acc 0.379
epoch: 15, step 1064 loss: 42.818 | val_loss 1.881 | train_acc 0.441 | val_acc 0.430 | test_acc 0.400 | past_task_test_acc 0.366
epoch: 16, step 1140 loss: 38.488 | val_loss 1.605 | train_acc 0.520 | val_acc 0.494 | test_acc 0.462 | past_task_test_acc 0.421
epoch: 17, step 1216 loss: 40.817 | val_loss 1.509 | train_acc 0.547 | val_acc 0.514 | test_acc 0.508 | past_task_test_acc 0.420
epoch: 18, step 1292 loss: 29.438 | val_loss 1.831 | train_acc 0.448 | val_acc 0.394 | test_acc 0.390 | past_task_test_acc 0.389
epoch: 19, step 1368 loss: 43.698 | val_loss 1.629 | train_acc 0.485 | val_acc 0.409 | test_acc 0.438 | past_task_test_acc 0.409
epoch: 20, step 1444 loss: 44.900 | val_loss 2.007 | train_acc 0.510 | val_acc 0.411 | test_acc 0.444 | past_task_test_acc 0.417
No. of duplicates: 0
Task 4/20
epoch: 1, step 0 loss: 0.000 | val_loss 18.561 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.321
epoch: 2, step 77 loss: 26.330 | val_loss 2.547 | train_acc 0.184 | val_acc 0.163 | test_acc 0.190 | past_task_test_acc 0.315
epoch: 3, step 154 loss: 24.590 | val_loss 2.105 | train_acc 0.238 | val_acc 0.211 | test_acc 0.214 | past_task_test_acc 0.292
epoch: 4, step 231 loss: 42.754 | val_loss 2.138 | train_acc 0.223 | val_acc 0.231 | test_acc 0.206 | past_task_test_acc 0.363
epoch: 5, step 308 loss: 41.441 | val_loss 2.121 | train_acc 0.219 | val_acc 0.233 | test_acc 0.198 | past_task_test_acc 0.349
epoch: 6, step 385 loss: 27.376 | val_loss 1.967 | train_acc 0.318 | val_acc 0.297 | test_acc 0.296 | past_task_test_acc 0.344
epoch: 7, step 462 loss: 21.707 | val_loss 1.864 | train_acc 0.391 | val_acc 0.352 | test_acc 0.340 | past_task_test_acc 0.381
epoch: 8, step 539 loss: 29.311 | val_loss 1.978 | train_acc 0.369 | val_acc 0.344 | test_acc 0.352 | past_task_test_acc 0.376
epoch: 9, step 616 loss: 29.671 | val_loss 2.080 | train_acc 0.399 | val_acc 0.358 | test_acc 0.386 | past_task_test_acc 0.397
epoch: 10, step 693 loss: 35.103 | val_loss 1.670 | train_acc 0.498 | val_acc 0.447 | test_acc 0.456 | past_task_test_acc 0.380
epoch: 11, step 770 loss: 10.987 | val_loss 1.819 | train_acc 0.543 | val_acc 0.477 | test_acc 0.460 | past_task_test_acc 0.403
epoch: 12, step 847 loss: 12.799 | val_loss 1.534 | train_acc 0.604 | val_acc 0.550 | test_acc 0.534 | past_task_test_acc 0.410
epoch: 13, step 924 loss: 27.968 | val_loss 1.510 | train_acc 0.578 | val_acc 0.500 | test_acc 0.506 | past_task_test_acc 0.405
epoch: 14, step 1001 loss: 10.393 | val_loss 1.463 | train_acc 0.679 | val_acc 0.562 | test_acc 0.564 | past_task_test_acc 0.415
epoch: 15, step 1078 loss: 11.402 | val_loss 2.069 | train_acc 0.540 | val_acc 0.487 | test_acc 0.486 | past_task_test_acc 0.385
epoch: 16, step 1155 loss: 16.907 | val_loss 1.361 | train_acc 0.724 | val_acc 0.575 | test_acc 0.602 | past_task_test_acc 0.430
epoch: 17, step 1232 loss: 12.382 | val_loss 1.397 | train_acc 0.704 | val_acc 0.592 | test_acc 0.582 | past_task_test_acc 0.428
epoch: 18, step 1309 loss: 15.910 | val_loss 1.260 | train_acc 0.748 | val_acc 0.611 | test_acc 0.614 | past_task_test_acc 0.400
epoch: 19, step 1386 loss: 14.365 | val_loss 1.553 | train_acc 0.715 | val_acc 0.547 | test_acc 0.542 | past_task_test_acc 0.416
epoch: 20, step 1463 loss: 13.511 | val_loss 1.147 | train_acc 0.834 | val_acc 0.672 | test_acc 0.690 | past_task_test_acc 0.454
No. of duplicates: 0
Task 5/20
epoch: 1, step 0 loss: 0.000 | val_loss 22.905 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.306
epoch: 2, step 63 loss: 35.433 | val_loss 2.460 | train_acc 0.243 | val_acc 0.188 | test_acc 0.200 | past_task_test_acc 0.199
epoch: 3, step 126 loss: 15.305 | val_loss 2.019 | train_acc 0.307 | val_acc 0.295 | test_acc 0.276 | past_task_test_acc 0.256
epoch: 4, step 189 loss: 28.627 | val_loss 2.195 | train_acc 0.319 | val_acc 0.292 | test_acc 0.300 | past_task_test_acc 0.278
epoch: 5, step 252 loss: 19.276 | val_loss 1.594 | train_acc 0.446 | val_acc 0.389 | test_acc 0.356 | past_task_test_acc 0.258
epoch: 6, step 315 loss: 21.234 | val_loss 1.829 | train_acc 0.430 | val_acc 0.355 | test_acc 0.358 | past_task_test_acc 0.274
epoch: 7, step 378 loss: 33.787 | val_loss 1.590 | train_acc 0.500 | val_acc 0.433 | test_acc 0.430 | past_task_test_acc 0.267
epoch: 8, step 441 loss: 40.070 | val_loss 2.129 | train_acc 0.414 | val_acc 0.362 | test_acc 0.340 | past_task_test_acc 0.274
epoch: 9, step 504 loss: 17.170 | val_loss 1.610 | train_acc 0.489 | val_acc 0.409 | test_acc 0.424 | past_task_test_acc 0.256
epoch: 10, step 567 loss: 16.727 | val_loss 1.480 | train_acc 0.559 | val_acc 0.489 | test_acc 0.450 | past_task_test_acc 0.283
epoch: 11, step 630 loss: 22.923 | val_loss 1.460 | train_acc 0.566 | val_acc 0.450 | test_acc 0.402 | past_task_test_acc 0.248
epoch: 12, step 693 loss: 12.048 | val_loss 1.963 | train_acc 0.538 | val_acc 0.403 | test_acc 0.406 | past_task_test_acc 0.287
epoch: 13, step 756 loss: 11.478 | val_loss 1.499 | train_acc 0.622 | val_acc 0.463 | test_acc 0.458 | past_task_test_acc 0.264
epoch: 14, step 819 loss: 14.418 | val_loss 1.473 | train_acc 0.635 | val_acc 0.453 | test_acc 0.472 | past_task_test_acc 0.270
epoch: 15, step 882 loss: 8.507 | val_loss 1.577 | train_acc 0.601 | val_acc 0.464 | test_acc 0.436 | past_task_test_acc 0.250
epoch: 16, step 945 loss: 16.997 | val_loss 1.758 | train_acc 0.634 | val_acc 0.472 | test_acc 0.456 | past_task_test_acc 0.278
epoch: 17, step 1008 loss: 6.866 | val_loss 1.505 | train_acc 0.652 | val_acc 0.480 | test_acc 0.466 | past_task_test_acc 0.257
epoch: 18, step 1071 loss: 9.267 | val_loss 1.652 | train_acc 0.677 | val_acc 0.503 | test_acc 0.494 | past_task_test_acc 0.266
epoch: 19, step 1134 loss: 8.675 | val_loss 1.587 | train_acc 0.639 | val_acc 0.481 | test_acc 0.466 | past_task_test_acc 0.258
epoch: 20, step 1197 loss: 24.875 | val_loss 1.374 | train_acc 0.708 | val_acc 0.541 | test_acc 0.522 | past_task_test_acc 0.276
No. of duplicates: 0
Task 6/20
dataset dim: torch.Size([3, 32, 32])
subsets length
dataset dim: torch.Size([3, 32, 32])
subsets length
DATASET: cifar100, train_size: 256, val_size: 128, test_size: 1.0
subsets lengthwith provided size 256
subsets lengthwith provided size 128
subsets lengthwith provided size 1.0
Task 1/20
epoch: 1, step 0 loss: 0.000 | val_loss 4.602 | train_acc 0.000 | val_acc 0.000 | test_acc 0.000 | past_task_test_acc 0.000
epoch: 2, step 40 loss: 49.131 | val_loss 1.670 | train_acc 0.231 | val_acc 0.230 | test_acc 0.234 | past_task_test_acc 0.234
epoch: 3, step 80 loss: 47.141 | val_loss 1.535 | train_acc 0.283 | val_acc 0.292 | test_acc 0.286 | past_task_test_acc 0.286
epoch: 4, step 120 loss: 45.516 | val_loss 1.466 | train_acc 0.329 | val_acc 0.302 | test_acc 0.338 | past_task_test_acc 0.338
epoch: 5, step 160 loss: 50.191 | val_loss 1.461 | train_acc 0.327 | val_acc 0.312 | test_acc 0.328 | past_task_test_acc 0.328
epoch: 6, step 200 loss: 50.646 | val_loss 1.418 | train_acc 0.336 | val_acc 0.317 | test_acc 0.358 | past_task_test_acc 0.358
epoch: 7, step 240 loss: 47.042 | val_loss 1.519 | train_acc 0.366 | val_acc 0.353 | test_acc 0.366 | past_task_test_acc 0.366
epoch: 8, step 280 loss: 48.775 | val_loss 1.470 | train_acc 0.354 | val_acc 0.338 | test_acc 0.356 | past_task_test_acc 0.356
epoch: 9, step 320 loss: 41.979 | val_loss 1.748 | train_acc 0.329 | val_acc 0.308 | test_acc 0.318 | past_task_test_acc 0.318
